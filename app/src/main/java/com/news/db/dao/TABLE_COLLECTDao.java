package com.news.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.news.db.session.DaoSession;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TABLE__COLLECT".
*/
public class TABLE_COLLECTDao extends AbstractDao<TABLE_COLLECT, Long> {

    public static final String TABLENAME = "TABLE__COLLECT";

    /**
     * Properties of entity TABLE_COLLECT.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property User = new Property(1, String.class, "User", false, "USER");
        public final static Property Year = new Property(2, int.class, "year", false, "YEAR");
        public final static Property Month = new Property(3, int.class, "month", false, "MONTH");
        public final static Property Day = new Property(4, int.class, "day", false, "DAY");
        public final static Property Desc = new Property(5, String.class, "desc", false, "DESC");
        public final static Property Source = new Property(6, String.class, "source", false, "SOURCE");
        public final static Property Image = new Property(7, String.class, "image", false, "IMAGE");
        public final static Property Type = new Property(8, String.class, "type", false, "TYPE");
        public final static Property Url = new Property(9, String.class, "url", false, "URL");
        public final static Property Who = new Property(10, String.class, "who", false, "WHO");
    };


    public TABLE_COLLECTDao(DaoConfig config) {
        super(config);
    }
    
    public TABLE_COLLECTDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TABLE__COLLECT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"USER\" TEXT NOT NULL ," + // 1: User
                "\"YEAR\" INTEGER NOT NULL ," + // 2: year
                "\"MONTH\" INTEGER NOT NULL ," + // 3: month
                "\"DAY\" INTEGER NOT NULL ," + // 4: day
                "\"DESC\" TEXT NOT NULL ," + // 5: desc
                "\"SOURCE\" TEXT," + // 6: source
                "\"IMAGE\" TEXT," + // 7: image
                "\"TYPE\" TEXT NOT NULL ," + // 8: type
                "\"URL\" TEXT NOT NULL ," + // 9: url
                "\"WHO\" TEXT);"); // 10: who
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TABLE__COLLECT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TABLE_COLLECT entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getUser());
        stmt.bindLong(3, entity.getYear());
        stmt.bindLong(4, entity.getMonth());
        stmt.bindLong(5, entity.getDay());
        stmt.bindString(6, entity.getDesc());
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(7, source);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(8, image);
        }
        stmt.bindString(9, entity.getType());
        stmt.bindString(10, entity.getUrl());
 
        String who = entity.getWho();
        if (who != null) {
            stmt.bindString(11, who);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TABLE_COLLECT readEntity(Cursor cursor, int offset) {
        TABLE_COLLECT entity = new TABLE_COLLECT( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // User
            cursor.getInt(offset + 2), // year
            cursor.getInt(offset + 3), // month
            cursor.getInt(offset + 4), // day
            cursor.getString(offset + 5), // desc
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // source
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // image
            cursor.getString(offset + 8), // type
            cursor.getString(offset + 9), // url
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // who
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TABLE_COLLECT entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUser(cursor.getString(offset + 1));
        entity.setYear(cursor.getInt(offset + 2));
        entity.setMonth(cursor.getInt(offset + 3));
        entity.setDay(cursor.getInt(offset + 4));
        entity.setDesc(cursor.getString(offset + 5));
        entity.setSource(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setType(cursor.getString(offset + 8));
        entity.setUrl(cursor.getString(offset + 9));
        entity.setWho(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TABLE_COLLECT entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TABLE_COLLECT entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
